version: '3'

services: # the different images that will be running as containers
  nginx: # service name

# location of the dockerfile that defines the nginx image. The dockerfile will be used to spin up an image during the build stage.
    build: ./nginx 

# Any traffic from 80 externally will be passed to port 80 of the NGINX container. You can access this container via localhost:80
    ports: 
        - 80:80 
    
# static storages provisioned since django does not handle static files in production
    volumes:  
        - static_volume:/microservice/staticfiles

# name of the image
    image: pacer_challenge_nginx

# will only start if web is up and running
    depends_on: 
        - web 

# restart service when it fails
    restart: "on-failure" 

  web: # service name

#build the image for the web service from the dockerfile in parent directory.  
    build: ./SampleDjangoApp 

# command directive passes the parameters to the service and they will be executed by the service. In this example, these are django commands which will be executed in the container where django lives.
    command: sh -c "python manage.py makemigrations &&
                    python manage.py migrate &&
                    python manage.py collectstatic --noinput &&
                    gunicorn SampleDjangoApp.wsgi:application --bind 0.0.0.0:8000" 

# map data and files from parent directory in host to microservice directory in docker container
    volumes: 
        # - .:/microservice 
        - static_volume:/microservice/staticfiles

# name of the image
    image: pacer_challenge_app

# expose the port to other services defined here so that they can access this service via the exposed port. In the case of Django, this is 8000 by default
    expose: 
      - 8000

    restart: "on-failure"

volumes:
  static_volume: